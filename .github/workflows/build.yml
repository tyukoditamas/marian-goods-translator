name: Build extractors & package native JARs

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-extractors:
    strategy:
      matrix:
        os: [ macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python 3.x
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # --- PDF extractor build steps ---
      - id: build-extractor-macos
        if: runner.os != 'Windows'
        name: Build extractor (macOS/Linux)
        shell: bash
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install pdfplumber pyinstaller
          pyinstaller --onefile python/translate_excel.py --name translate_excel
          echo "artifact=extract" >> $GITHUB_OUTPUT

      - id: build-extractor-windows
        if: runner.os == 'Windows'
        name: Build extractor (Windows)
        shell: pwsh
        run: |
          python -m venv venv
          .\venv\Scripts\Activate.ps1
          pip install pdfplumber pyinstaller
          pyinstaller --onefile python/translate_excel.py --name translate_excel.exe
          echo "artifact=translate_excel.exe" >> $GITHUB_OUTPUT

      - name: Upload extractor (macOS)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: extractor-macos
          path: dist/${{ steps.build-extractor-macos.outputs.artifact }}

      - name: Upload extractor (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: extractor-windows
          path: dist/${{ steps.build-extractor-windows.outputs.artifact }}


      # --- Excel translator build steps ---
      - id: build-translator-macos
        if: runner.os != 'Windows'
        name: Build translator (macOS/Linux)
        shell: bash
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install pandas openpyxl torch transformers sentencepiece pyinstaller
          pyinstaller --onefile python/translate_excel.py --name translate_excel
          echo "artifact=translate_excel" >> $GITHUB_OUTPUT

      - id: build-translator-windows
        if: runner.os == 'Windows'
        name: Build translator (Windows)
        shell: pwsh
        run: |
          python -m venv venv
          .\venv\Scripts\Activate.ps1
          pip install pandas openpyxl torch transformers sentencepiece pyinstaller
          pyinstaller --onefile python/translate_excel.py --name translate_excel.exe
          echo "artifact=translate_excel.exe" >> $GITHUB_OUTPUT

      - name: Upload translator (macOS)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: translator-macos
          path: dist/${{ steps.build-translator-macos.outputs.artifact }}

      - name: Upload translator (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: translator-windows
          path: dist/${{ steps.build-translator-windows.outputs.artifact }}


  package:
    needs: build-extractors
    strategy:
      matrix:
        os: [ macos-latest, windows-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3

      # --- Pull in *all* native binaries into the right folder ---
      - name: Download native binaries (macOS)
        if: runner.os != 'Windows'
        uses: actions/download-artifact@v4
        with:
          path: src/main/resources/native/macos

      - name: Download native binaries (Windows)
        if: runner.os == 'Windows'
        uses: actions/download-artifact@v4
        with:
          path: src/main/resources/native/windows

      - name: Set up Java 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: '17'

      - name: Build & package JavaFX app
        run: mvn clean package -DskipTests

      - name: Upload installer artifacts
        uses: actions/upload-artifact@v4
        with:
          name: import-declaration-reader-plexus-tnt-${{ runner.os == 'Windows' && 'windows' || 'macos' }}
          path: target/jpackage/**
